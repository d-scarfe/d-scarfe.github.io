<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>java - Tag | Daniel Scarfe</title>
        <link>https://scarfe.uk/tags/java/</link>
        <description>java - Tag | Daniel Scarfe</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 May 2022 06:00:00 &#43;0100</lastBuildDate><atom:link href="https://scarfe.uk/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Building a REST API with Spring WebFlux</title>
    <link>https://scarfe.uk/java/spring-webflux/</link>
    <pubDate>Mon, 30 May 2022 06:00:00 &#43;0100</pubDate>
    <author>Daniel Scarfe</author>
    <guid>https://scarfe.uk/java/spring-webflux/</guid>
    <description><![CDATA[In this article, we&rsquo;re going to build a reactive REST API in Java using Spring&rsquo;s WebFlux and annotation processing.
We&rsquo;ll demonstrate how to make use of Flux and Mono publishers to serve JSON content to the client.
This tutorial shall provide the basis from which we can build a reactive, scalable web backend in Java.
Introducing Spring WebFlux Why choose WebFlux? WebFlux is Spring&rsquo;s answer to the need for a non-blocking web stack that handles concurrency with fewer threads, and scales with less reliance upon physical hardware.]]></description>
</item>
</channel>
</rss>
